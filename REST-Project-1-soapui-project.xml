<?xml version="1.0" encoding="UTF-8"?>
<con:soapui-project id="0f551295-e0a9-43a2-8f5f-25ee2dc0680d" activeEnvironment="Default" name="REST Project 1" resourceRoot="" soapui-version="5.5.0" xmlns:con="http://eviware.com/soapui/config"><con:settings/><con:interface xsi:type="con:RestService" id="71f4381b-a305-41c7-af0a-9c87600b1f5e" wadlVersion="http://wadl.dev.java.net/2009/02" name="http://localhost:8088" type="rest" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache/><con:endpoints><con:endpoint>http://OMEN:8089/</con:endpoint><con:endpoint>http://localhost:8088</con:endpoint></con:endpoints><con:resource name="calculardxc" path="/devops/dxc/calculardxc" id="8fdac392-d6f9-46e8-972f-f550ffe3df92"><con:settings/><con:parameters/><con:method name="Method 1" id="5f4ea005-f9ba-4d3d-9112-3c2735fe1d10" method="GET"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/></con:representation><con:request name="calculardxc" id="519e41de-3b63-4c2b-b824-c5a0506e5e01" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://OMEN:8088/</con:endpoint><con:request/><con:originalUri>http://OMEN/devops/dxc/calculardxc</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="calcularsaldo" path="/devops/dxc/calcularsaldo" id="cf431bc6-e636-4971-a173-ac0eaf042bac"><con:settings/><con:parameters/><con:method name="Method 1" id="b6ff7ebc-20eb-4751-ac88-91d10e8215f9" method="GET"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/></con:representation><con:request name="Request 1" id="895ce7b6-58a4-4ef1-9a2f-d6897ecae727" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://OMEN:8088/</con:endpoint><con:request/><con:originalUri>http://OMEN/devops/dxc/calcularsaldo</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="calcularimpuesto" path="/devops/dxc/calcularimpuesto" id="aa37a005-cc22-4dfa-9605-c4b6a34ec438"><con:settings/><con:parameters/><con:method name="Method 1" id="8357c8c2-94d8-4ac8-a5d2-1faf4d4c9259" method="GET"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/></con:representation><con:request name="Request 1" id="ec06fb47-8de3-4435-b760-4fe78d8e2b76" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://OMEN:8089/</con:endpoint><con:request/><con:originalUri>http://OMEN/devops/dxc/calcularimpuesto</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:interface><con:restMockService id="2ab6fbc6-194d-4f13-bd9d-f5fee8d88a56" port="8088" path="/" host="OMEN" name="REST MockService 1" docroot=""><con:settings/><con:properties/><con:restMockAction name="/devops/dxc/calculardxc" method="GET" resourcePath="/devops/dxc/calculardxc" id="37563967-c75f-4539-bc96-b59e76ca90f2"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Response 1" id="1451a763-ddee-41cc-8d83-0c516ccdcdf7" httpResponseStatus="200"><con:settings/><con:responseContent>{"tu10%":"100000"}</con:responseContent></con:response></con:restMockAction><con:restMockAction name="/devops/dxc/calcularsaldo" method="GET" resourcePath="/devops/dxc/calcularsaldo" id="2478eac5-33a0-4c06-9c93-ef837317d112"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Response 1" id="18240543-4e62-4d54-97d2-1db3eb36fbde" httpResponseStatus="200"><con:settings/><con:responseContent>{"tusaldoes":"20000"}</con:responseContent></con:response></con:restMockAction><con:restMockAction name="/devops/dxc/calcularimpuesto" method="GET" resourcePath="/devops/dxc/calcularimpuesto" id="4e03324e-b4f2-4ff8-bb3d-361fb0687b14"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Response 1" id="e43af83a-f8c6-4b74-b8e0-13e6288e5f3d" httpResponseStatus="200"><con:settings/><con:responseContent>{"tuimpuestoes":"2000"}</con:responseContent></con:response></con:restMockAction></con:restMockService><con:properties/><con:wssContainer/><con:oAuth2ProfileContainer/><con:oAuth1ProfileContainer/></con:soapui-project>